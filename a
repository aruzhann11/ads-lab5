1 ads-labs-куча-1
Скоро состоится финал ICPC, поэтому Ергельди и его команде нужна ваша помощь. Пока они готовились к соревнованиям, перед ними встала интересная задача. У вас есть список длины 
 который состоит из массивов разной длины. У вас есть одна единственная операция, вы можете взять любые два массива и объединить их в один, стоимость операции равна сумме их длин. В результате у вас будет список 
 - 1 массив. Процесс повторяется до тех пор, пока не останется только один конечный массив. Узнайте, за какую минимальную стоимость можно объединить все массивы. Смотрите пример здесь.

Формат ввода
В первой строке записано целое число 
 (
), размер списка 
. Следующая строка содержит 
 положительные целые числа 
, 
, ..., 
 (
), представляющие размеры массивов в списке 
.

Формат вывода
Выведите одно целое число - минимальная стоимость операций.

#include <iostream>
using namespace std;

class MinHeap {
private:
    int heapSize;
    int arrSize;
    long long* arr;

    int parent(int i) {
      return (i - 1) / 2; 
    }
    int left(int i) {
      return 2 * i + 1; 
    }
    int right(int i) { 
      return 2 * i + 2;
     }

public:
    MinHeap(int arrSize) {
        this->heapSize = 0;
        this->arrSize = arrSize;
        arr = new long long[arrSize];
    }

    ~MinHeap() {
         delete[] arr; 
        }

    void heapify(int i) {
        int smallest = i;
        int l = left(i);
        int r = right(i);

        if (l < heapSize && arr[l] < arr[smallest]) smallest = l;
        if (r < heapSize && arr[r] < arr[smallest]) smallest = r;

        if (smallest != i) {
            swap(arr[i], arr[smallest]);
            heapify(smallest);
        }
    }

    void unheapify(int i) {
        int p = parent(i);
        if (p >= 0 && arr[p] > arr[i]) {
            swap(arr[p], arr[i]);
            unheapify(p);
        }
    }

    void Insert(long long val) {
        arr[heapSize] = val;
        heapSize++;
        unheapify(heapSize - 1);
    }

    long long extractMin() {
        long long root = arr[0];
        arr[0] = arr[heapSize - 1];
        heapSize--;
        heapify(0);
        return root;
    }

    long long top() { 
        return arr[0]; 
    }

    int getsize() { 
        return heapSize; 
    }
};

int main() {
    int n;
    cin >> n;
    long long arr[n];
    MinHeap h(1000);

    for (int i = 0; i < n; i++) {
        cin >> arr[i];
        h.Insert(arr[i]);
    }

    long long total = 0;
    while (h.getsize() > 1) {
        long long a = h.extractMin();
        long long b = h.extractMin();
        long long sum = a + b;
        total += sum;
        h.Insert(sum);
    }

    cout << total;
}
